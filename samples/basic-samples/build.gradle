//-------------------------------------------------------------------------------------------------
// PLUGINS.
//-------------------------------------------------------------------------------------------------

buildscript {
    repositories {
        if (project.hasProperty("maven.local")) {
            mavenLocal()
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
        classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}"
    }
}

apply(plugin: "kotlin")
apply(plugin: "org.jetbrains.dokka")
apply(plugin: "org.junit.platform.gradle.plugin")

//-------------------------------------------------------------------------------------------------
// SOURCE SETS.
//-------------------------------------------------------------------------------------------------

sourceSets {
    main {
        java.srcDirs = ["src"]
        kotlin.srcDirs = ["src"]
        resources.srcDirs = ["src"]
    }
    test {
        java.srcDirs = ["test"]
        kotlin.srcDirs = ["test"]
        resources.srcDirs = ["test"]
    }
}

//-------------------------------------------------------------------------------------------------
// REPOSITORIES.
//-------------------------------------------------------------------------------------------------

repositories {
    if (project.hasProperty("maven.local")) {
        mavenLocal()
    }
    jcenter()
    mavenCentral()
}

//-------------------------------------------------------------------------------------------------
// DEPENDENCIES.
//-------------------------------------------------------------------------------------------------

// main source dependencies.
dependencies {
    // kotlin standard library.
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
}

// test source dependencies.
dependencies {
    // test frameworks and libraries.
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}

//-------------------------------------------------------------------------------------------------
// CONFIGURATION.
//-------------------------------------------------------------------------------------------------

dokka {
    outputFormat = "javadoc"
}
